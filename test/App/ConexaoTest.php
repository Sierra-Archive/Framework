<?php

namespace Framework\App;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-24 at 16:29:43.
 */
class ConexaoTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Conexao
     */
    protected $object;
    protected $_Registro;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->_Registro    = &\Framework\App\Registro::getInstacia();
        $this->object     = &$this->_Registro->_Conexao;
        
        // Inicializa Classes caso ainda nao tenham sido
        if ($this->object===false) {
            $this->_Registro->_Conexao = new Conexao();
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Framework\App\Conexao::Dao_GetColunas
     * @todo   Implement testDao_GetColunas().
     */
    public function testDao_GetColunas() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::prepare
     * @todo   Implement testPrepare().
     */
    public function testPrepare() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::query
     * @todo   Implement testQuery().
     */
    public function testQuery() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::multi_query
     * @todo   Implement testMulti_query().
     */
    public function testMulti_query() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::ultimo_id
     * @todo   Implement testUltimo_id().
     */
    public function testUltimo_id() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::autoreparo_query
     * @todo   Implement testAutoreparo_query().
     */
    public function testAutoreparo_query() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Sql_Query
     * @todo   Implement testSql_Query().
     */
    public function testSql_Query() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Sql_Inserir
     * @todo   Implement testSql_Inserir().
     */
    public function testSql_Inserir() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Sql_Delete
     * @todo   Implement testSql_Delete().
     */
    public function testSql_Delete() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Sql_Update
     * @todo   Implement testSql_Update().
     */
    public function testSql_Update() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Sql_Select_Dados
     * @todo   Implement testSql_Select_Dados().
     */
    public function testSql_Select_Dados() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Sql_Contar
     * @todo   Implement testSql_Contar().
     */
    public function testSql_Contar() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Sql_Select
     * @todo   Implement testSql_Select().
     */
    public function testSql_Select() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Tabelas_CapturaLinkadas
     * @todo   Implement testTabelas_CapturaLinkadas().
     */
    public function testTabelas_CapturaLinkadas() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Tabelas_CapturaExtrangeiras
     * @todo   Implement testTabelas_CapturaExtrangeiras().
     */
    public function testTabelas_CapturaExtrangeiras() {
        // Teste 1
        $extrangeiras = 'EE.id|EE.nome';
        list($ligacao,$mostrar,$condicao) = $this->object->Extrangeiras_Quebra($extrangeiras);
        $this->assertTrue(is_array($ligacao),'Falhou Teste 1 -> Ligacao não é Array');
        $this->assertEquals(2,sizeof($ligacao),'Falhou Teste 1 -> Ligacao Inválida');
        $this->assertTrue(is_array($mostrar),'Falhou Teste 1 -> Mostrar não é Array');
        $this->assertEquals(2,sizeof($mostrar),'Falhou Teste 1 -> Mostrar Inválido');
        $this->assertFalse($condicao,'Falhou Teste 1');
        // Teste 2
        $extrangeiras = 'EE.id|EE.nome-EE.senha-EE.Teste|EE.status=1';
        list($ligacao,$mostrar,$condicao) = $this->object->Extrangeiras_Quebra($extrangeiras);
        $this->assertTrue(is_array($ligacao),'Falhou Teste 2 -> Ligacao não é Array');
        $this->assertEquals(2,sizeof($ligacao),'Falhou Teste 2 -> Ligacao Inválida');
        $this->assertTrue(is_array($mostrar),'Falhou Teste 2 -> Mostrar não é Array');
        $this->assertEquals(3,sizeof($mostrar),'Falhou Teste 2 -> Mostrar Inválido');
        $this->assertTrue(is_array($mostrar[1]),'Falhou Teste 2 -> Mostrar não é Array');
        $this->assertEquals(2,sizeof($mostrar[1]),'Falhou Teste 2 -> Mostrar Inválido');
        $this->assertTrue(is_array($condicao),'Falhou Teste 2 -> Condição não é Array');
        $this->assertEquals(2,sizeof($condicao),'Falhou Teste 2 -> Condição Inválida');
        // Teste 3
        $extrangeiras = 'EE.id|EE.nome-EE.senha-EE.Teste|EE.status=1-EE.teste=1-EE.equipamento=1';
        list($ligacao,$mostrar,$condicao) = $this->object->Extrangeiras_Quebra($extrangeiras);
        $this->assertTrue(is_array($ligacao),'Falhou Teste 3 -> Ligacao não é Array');
        $this->assertEquals(2,sizeof($ligacao),'Falhou Teste 3 -> Ligacao Inválida');
        $this->assertTrue(is_array($mostrar),'Falhou Teste 3 -> Mostrar não é Array');
        $this->assertEquals(3,sizeof($mostrar),'Falhou Teste 3 -> Mostrar Inválido');
        $this->assertTrue(is_array($mostrar[1]),'Falhou Teste 3 -> Mostrar não é Array');
        $this->assertEquals(2,sizeof($mostrar[1]),'Falhou Teste 3 -> Mostrar Inválido');
        $this->assertTrue(is_array($condicao),'Falhou Teste 3 -> Condição não é Array');
        $this->assertEquals(3,sizeof($condicao),'Falhou Teste 3 -> Condição Inválida');
        $this->assertTrue(is_array($condicao[1]),'Falhou Teste 3 -> Condição não é Array');
        $this->assertEquals(2,sizeof($condicao[1]),'Falhou Teste 3 -> Condição Inválida');
    }

    /**
     * @covers Framework\App\Conexao::Extrangeiras_Quebra
     * @todo   Implement testExtrangeiras_Quebra().
     */
    public function testExtrangeiras_Quebra() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Tabelas_GetSiglas_Recolher
     * @todo   Implement testTabelas_GetSiglas_Recolher().
     */
    public function testTabelas_GetSiglas_Recolher() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Tabelas_GetCampos_Recolher
     * @todo   Implement testTabelas_GetCampos_Recolher().
     */
    public function testTabelas_GetCampos_Recolher() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Tabelas_GetLinks_Recolher
     * @todo   Implement testTabelas_GetLinks_Recolher().
     */
    public function testTabelas_GetLinks_Recolher() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::Load
     * @todo   Implement testLoad().
     */
    public function testLoad() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::GetSigla
     * @todo   Implement testGetSigla().
     */
    public function testGetSigla() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Framework\App\Conexao::__destruct
     * @todo   Implement test__destruct().
     */
    public function test__destruct() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
