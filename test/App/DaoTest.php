<?php

namespace Framework\App;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-08-24 at 16:29:47.
 */
class DaoTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Dao
     */
    protected $objects;
    protected $tabelas;
    protected $tabelas_ext;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
            // Carrega Todos os DAO
            $diretorio = dir(DAO_PATH);
            $conexao = new Conexao();
            // Percorre DiretÃ³rio
            while($arquivo = $diretorio -> read()){
                if(strpos($arquivo, 'DAO.php')!==false){
                    $arquivo                = str_replace(Array('.php','.'), Array('','_') , $arquivo);

                    $this->tabelas[$arquivo] = Array (
                        'class'     => $arquivo::Get_Class(),
                        'nome'      => $arquivo::Get_Nome(),
                        'sigla'     => $arquivo::Get_Sigla(),
                        'colunas'   => $arquivo::Get_Colunas(),
                        'engine'    => $arquivo::Get_Engine(),
                        'charset'   => $arquivo::Get_Charset(),
                        'autoadd'   => $arquivo::Get_Autoadd(),
                        'Link'      => $arquivo::Get_LinkTable(),
                        'static'    => $arquivo::Get_StaticTable(),
                    );
                    $sigla = &$this->tabelas[$arquivo]['sigla'];

                    // Aproveita o while e Pega as extrangeiras
                    $resultado_unico = new $arquivo();
                    $extrangeira    = $resultado_unico->Get_Extrangeiras();
                    if($extrangeira!==false){
                        reset($extrangeira);
                        while (key($extrangeira) !== null) {
                            $current = current($extrangeira);
                            list($ligacao,$mostrar,$extcondicao) = $conexao->Extrangeiras_Quebra($current['conect']);

                            // ARMAZENA NA VARIAVEL DE CONTROLE AS SIGLAS
                            $this->tabelas_ext[$ligacao[0]][$sigla] = $sigla;
                            next($extrangeira);
                        }
                    }
                }
            }
            $diretorio -> close();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * 
     */
    public function testSiglas() {
        $siglas = Array();
        foreach($this->tabelas as &$valor){
            $nome = '';
            if(isset($siglas[$valor['sigla']])){
                $nome = $siglas[$valor['sigla']];
            }
            $this->assertArrayNotHasKey(
                $valor['sigla'],$siglas,'Siglas Repetidas: '.$nome.' e '.$valor['nome'] //$siglas[$valor['sigla']].' e '.
            );
            $siglas[$valor['sigla']] = $valor['nome'];
        }

        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testColunas() {
        $siglas = Array();
        // Abre Todos os DAO
        foreach($this->tabelas as &$valor){
            
            // Pega Coluna
            $array = $valor['colunas'];
            
            foreach($array as &$valor){

                $array = $valor['colunas'];

            }
        }

        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
